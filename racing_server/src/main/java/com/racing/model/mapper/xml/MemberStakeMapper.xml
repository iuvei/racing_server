<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.racing.model.mapper.MemberStakeMapper" >
  <resultMap id="BaseResultMap" type="com.racing.model.po.MemberStake" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="members_id" property="membersId" jdbcType="INTEGER" />
    <result column="racing_num" property="racingNum" jdbcType="VARCHAR" />
    <result column="total_stake_amount" property="totalStakeAmount" jdbcType="DECIMAL" />
    <result column="total_income_amount" property="totalIncomeAmount" jdbcType="DECIMAL" />
    <result column="total_deficit_amount" property="totalDeficitAmount" jdbcType="DECIMAL" />
    <result column="total_stake_count" property="totalStakeCount" jdbcType="INTEGER" />
    <result column="is_complate_statistics" property="isComplateStatistics" jdbcType="BIT" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
  </resultMap>
  <resultMap id="ResultMapWithBLOBs" type="com.racing.model.po.MemberStakeWithBLOBs" extends="BaseResultMap" >
    <result column="appoint_stake" property="appointStake" jdbcType="LONGVARCHAR" />
    <result column="common_stake" property="commonStake" jdbcType="LONGVARCHAR" />
    <result column="ranking_stake" property="rankingStake" jdbcType="LONGVARCHAR" />
  </resultMap>
  
  <update id="updateIncome">
  UPDATE total_racing_income
SET
 total_stake_amount  = total_stake_amount + ${record.totalStakeAmount},
 total_income_amount  = total_income_amount + ${record.totalIncomeAmount},
 total_deficit_amount  = total_income_amount - total_stake_amount,
 total_stake_count  = total_stake_count + ${record.totalStakeCount}
WHERE  
racing_num = ${record.racingNum}
and
members_id = ${record.membersId}
  </update>
  
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    id, members_id, racing_num, total_stake_amount, total_income_amount, total_deficit_amount, 
    total_stake_count, is_complate_statistics, create_time
  </sql>
  <sql id="Blob_Column_List" >
    appoint_stake, common_stake, ranking_stake
  </sql>
  <select id="selectByExampleWithBLOBs" resultMap="ResultMapWithBLOBs" parameterType="com.racing.model.po.MemberStakeExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from member_stake
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.racing.model.po.MemberStakeExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from member_stake
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="ResultMapWithBLOBs" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from member_stake
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from member_stake
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.racing.model.po.MemberStakeExample" >
    delete from member_stake
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.racing.model.po.MemberStakeWithBLOBs" useGeneratedKeys="true" keyProperty="id" >
    insert into member_stake (id, members_id, racing_num, 
      total_stake_amount, total_income_amount, total_deficit_amount, 
      total_stake_count, is_complate_statistics, create_time, 
      appoint_stake, common_stake, ranking_stake
      )
    values (#{id,jdbcType=INTEGER}, #{membersId,jdbcType=INTEGER}, #{racingNum,jdbcType=VARCHAR}, 
      #{totalStakeAmount,jdbcType=DECIMAL}, #{totalIncomeAmount,jdbcType=DECIMAL}, #{totalDeficitAmount,jdbcType=DECIMAL}, 
      #{totalStakeCount,jdbcType=INTEGER}, #{isComplateStatistics,jdbcType=BIT}, #{createTime,jdbcType=TIMESTAMP}, 
      #{appointStake,jdbcType=LONGVARCHAR}, #{commonStake,jdbcType=LONGVARCHAR}, #{rankingStake,jdbcType=LONGVARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.racing.model.po.MemberStakeWithBLOBs" useGeneratedKeys="true" keyProperty="id" >
    insert into member_stake
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="membersId != null" >
        members_id,
      </if>
      <if test="racingNum != null" >
        racing_num,
      </if>
      <if test="totalStakeAmount != null" >
        total_stake_amount,
      </if>
      <if test="totalIncomeAmount != null" >
        total_income_amount,
      </if>
      <if test="totalDeficitAmount != null" >
        total_deficit_amount,
      </if>
      <if test="totalStakeCount != null" >
        total_stake_count,
      </if>
      <if test="isComplateStatistics != null" >
        is_complate_statistics,
      </if>
      <if test="createTime != null" >
        create_time,
      </if>
      <if test="appointStake != null" >
        appoint_stake,
      </if>
      <if test="commonStake != null" >
        common_stake,
      </if>
      <if test="rankingStake != null" >
        ranking_stake,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="membersId != null" >
        #{membersId,jdbcType=INTEGER},
      </if>
      <if test="racingNum != null" >
        #{racingNum,jdbcType=VARCHAR},
      </if>
      <if test="totalStakeAmount != null" >
        #{totalStakeAmount,jdbcType=DECIMAL},
      </if>
      <if test="totalIncomeAmount != null" >
        #{totalIncomeAmount,jdbcType=DECIMAL},
      </if>
      <if test="totalDeficitAmount != null" >
        #{totalDeficitAmount,jdbcType=DECIMAL},
      </if>
      <if test="totalStakeCount != null" >
        #{totalStakeCount,jdbcType=INTEGER},
      </if>
      <if test="isComplateStatistics != null" >
        #{isComplateStatistics,jdbcType=BIT},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="appointStake != null" >
        #{appointStake,jdbcType=LONGVARCHAR},
      </if>
      <if test="commonStake != null" >
        #{commonStake,jdbcType=LONGVARCHAR},
      </if>
      <if test="rankingStake != null" >
        #{rankingStake,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.racing.model.po.MemberStakeExample" resultType="java.lang.Integer" >
    select count(*) from member_stake
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update member_stake
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.membersId != null" >
        members_id = #{record.membersId,jdbcType=INTEGER},
      </if>
      <if test="record.racingNum != null" >
        racing_num = #{record.racingNum,jdbcType=VARCHAR},
      </if>
      <if test="record.totalStakeAmount != null" >
        total_stake_amount = #{record.totalStakeAmount,jdbcType=DECIMAL},
      </if>
      <if test="record.totalIncomeAmount != null" >
        total_income_amount = #{record.totalIncomeAmount,jdbcType=DECIMAL},
      </if>
      <if test="record.totalDeficitAmount != null" >
        total_deficit_amount = #{record.totalDeficitAmount,jdbcType=DECIMAL},
      </if>
      <if test="record.totalStakeCount != null" >
        total_stake_count = #{record.totalStakeCount,jdbcType=INTEGER},
      </if>
      <if test="record.isComplateStatistics != null" >
        is_complate_statistics = #{record.isComplateStatistics,jdbcType=BIT},
      </if>
      <if test="record.createTime != null" >
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.appointStake != null" >
        appoint_stake = #{record.appointStake,jdbcType=LONGVARCHAR},
      </if>
      <if test="record.commonStake != null" >
        common_stake = #{record.commonStake,jdbcType=LONGVARCHAR},
      </if>
      <if test="record.rankingStake != null" >
        ranking_stake = #{record.rankingStake,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map" >
    update member_stake
    set id = #{record.id,jdbcType=INTEGER},
      members_id = #{record.membersId,jdbcType=INTEGER},
      racing_num = #{record.racingNum,jdbcType=VARCHAR},
      total_stake_amount = #{record.totalStakeAmount,jdbcType=DECIMAL},
      total_income_amount = #{record.totalIncomeAmount,jdbcType=DECIMAL},
      total_deficit_amount = #{record.totalDeficitAmount,jdbcType=DECIMAL},
      total_stake_count = #{record.totalStakeCount,jdbcType=INTEGER},
      is_complate_statistics = #{record.isComplateStatistics,jdbcType=BIT},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      appoint_stake = #{record.appointStake,jdbcType=LONGVARCHAR},
      common_stake = #{record.commonStake,jdbcType=LONGVARCHAR},
      ranking_stake = #{record.rankingStake,jdbcType=LONGVARCHAR}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update member_stake
    set id = #{record.id,jdbcType=INTEGER},
      members_id = #{record.membersId,jdbcType=INTEGER},
      racing_num = #{record.racingNum,jdbcType=VARCHAR},
      total_stake_amount = #{record.totalStakeAmount,jdbcType=DECIMAL},
      total_income_amount = #{record.totalIncomeAmount,jdbcType=DECIMAL},
      total_deficit_amount = #{record.totalDeficitAmount,jdbcType=DECIMAL},
      total_stake_count = #{record.totalStakeCount,jdbcType=INTEGER},
      is_complate_statistics = #{record.isComplateStatistics,jdbcType=BIT},
      create_time = #{record.createTime,jdbcType=TIMESTAMP}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.racing.model.po.MemberStakeWithBLOBs" >
    update member_stake
    <set >
      <if test="membersId != null" >
        members_id = #{membersId,jdbcType=INTEGER},
      </if>
      <if test="racingNum != null" >
        racing_num = #{racingNum,jdbcType=VARCHAR},
      </if>
      <if test="totalStakeAmount != null" >
        total_stake_amount = #{totalStakeAmount,jdbcType=DECIMAL},
      </if>
      <if test="totalIncomeAmount != null" >
        total_income_amount = #{totalIncomeAmount,jdbcType=DECIMAL},
      </if>
      <if test="totalDeficitAmount != null" >
        total_deficit_amount = #{totalDeficitAmount,jdbcType=DECIMAL},
      </if>
      <if test="totalStakeCount != null" >
        total_stake_count = #{totalStakeCount,jdbcType=INTEGER},
      </if>
      <if test="isComplateStatistics != null" >
        is_complate_statistics = #{isComplateStatistics,jdbcType=BIT},
      </if>
      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="appointStake != null" >
        appoint_stake = #{appointStake,jdbcType=LONGVARCHAR},
      </if>
      <if test="commonStake != null" >
        common_stake = #{commonStake,jdbcType=LONGVARCHAR},
      </if>
      <if test="rankingStake != null" >
        ranking_stake = #{rankingStake,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.racing.model.po.MemberStakeWithBLOBs" >
    update member_stake
    set members_id = #{membersId,jdbcType=INTEGER},
      racing_num = #{racingNum,jdbcType=VARCHAR},
      total_stake_amount = #{totalStakeAmount,jdbcType=DECIMAL},
      total_income_amount = #{totalIncomeAmount,jdbcType=DECIMAL},
      total_deficit_amount = #{totalDeficitAmount,jdbcType=DECIMAL},
      total_stake_count = #{totalStakeCount,jdbcType=INTEGER},
      is_complate_statistics = #{isComplateStatistics,jdbcType=BIT},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      appoint_stake = #{appointStake,jdbcType=LONGVARCHAR},
      common_stake = #{commonStake,jdbcType=LONGVARCHAR},
      ranking_stake = #{rankingStake,jdbcType=LONGVARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.racing.model.po.MemberStake" >
    update member_stake
    set members_id = #{membersId,jdbcType=INTEGER},
      racing_num = #{racingNum,jdbcType=VARCHAR},
      total_stake_amount = #{totalStakeAmount,jdbcType=DECIMAL},
      total_income_amount = #{totalIncomeAmount,jdbcType=DECIMAL},
      total_deficit_amount = #{totalDeficitAmount,jdbcType=DECIMAL},
      total_stake_count = #{totalStakeCount,jdbcType=INTEGER},
      is_complate_statistics = #{isComplateStatistics,jdbcType=BIT},
      create_time = #{createTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>