<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.racing.model.mapper.UserRacingIncomeMapper" >
  <resultMap id="BaseResultMap" type="com.racing.model.po.UserRacingIncome" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="user_id" property="userId" jdbcType="INTEGER" />
    <result column="racing_num" property="racingNum" jdbcType="VARCHAR" />
    <result column="total_stake_amount" property="totalStakeAmount" jdbcType="DECIMAL" />
    <result column="user_stake_amount" property="userStakeAmount" jdbcType="DECIMAL" />
    <result column="members_stake_amount" property="membersStakeAmount" jdbcType="DECIMAL" />
    <result column="total_income_amount" property="totalIncomeAmount" jdbcType="DECIMAL" />
    <result column="user_income_amount" property="userIncomeAmount" jdbcType="DECIMAL" />
    <result column="members_income_amount" property="membersIncomeAmount" jdbcType="DECIMAL" />
    <result column="total_deficit_amount" property="totalDeficitAmount" jdbcType="DECIMAL" />
    <result column="user_deficit_amount" property="userDeficitAmount" jdbcType="DECIMAL" />
    <result column="members_deficit_amount" property="membersDeficitAmount" jdbcType="DECIMAL" />
    <result column="total_stake_count" property="totalStakeCount" jdbcType="INTEGER" />
    <result column="user_stake_count" property="userStakeCount" jdbcType="INTEGER" />
    <result column="members_stake_count" property="membersStakeCount" jdbcType="INTEGER" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
  </resultMap>
  
  <update id="updateIncome">
  UPDATE user_racing_income
SET
 total_stake_amount  = total_stake_amount + ${racingIncome.totalStakeAmount},
 user_stake_amount  = user_stake_amount + ${racingIncome.userStakeAmount},
 members_stake_amount  = members_stake_amount + ${racingIncome.membersStakeAmount},
 total_income_amount  = total_income_amount + ${racingIncome.totalIncomeAmount},
 user_income_amount  = user_income_amount + ${racingIncome.userIncomeAmount},
 members_income_amount  = members_income_amount + ${racingIncome.membersIncomeAmount},
 total_deficit_amount  = total_income_amount - total_stake_amount,
 user_deficit_amount  = user_income_amount - user_stake_amount,
 members_deficit_amount  = members_income_amount - members_stake_amount,
 total_stake_count  = total_stake_count + ${racingIncome.totalStakeCount},
 user_stake_count  = user_stake_count + ${racingIncome.userStakeCount},
 members_stake_count  = members_stake_count + ${racingIncome.membersStakeCount}
WHERE  
user_id  = ${racingIncome.userId}
and
racing_num = ${racingIncome.racingNum}
  </update>
  
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    id, user_id, racing_num, total_stake_amount, user_stake_amount, members_stake_amount, 
    total_income_amount, user_income_amount, members_income_amount, total_deficit_amount, 
    user_deficit_amount, members_deficit_amount, total_stake_count, user_stake_count, 
    members_stake_count, create_time
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.racing.model.po.UserRacingIncomeExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from user_racing_income
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from user_racing_income
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from user_racing_income
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.racing.model.po.UserRacingIncomeExample" >
    delete from user_racing_income
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.racing.model.po.UserRacingIncome" useGeneratedKeys="true" keyProperty="id" >
    insert into user_racing_income (id, user_id, racing_num, 
      total_stake_amount, user_stake_amount, members_stake_amount, 
      total_income_amount, user_income_amount, members_income_amount, 
      total_deficit_amount, user_deficit_amount, 
      members_deficit_amount, total_stake_count, 
      user_stake_count, members_stake_count, create_time
      )
    values (#{id,jdbcType=INTEGER}, #{userId,jdbcType=INTEGER}, #{racingNum,jdbcType=VARCHAR}, 
      #{totalStakeAmount,jdbcType=DECIMAL}, #{userStakeAmount,jdbcType=DECIMAL}, #{membersStakeAmount,jdbcType=DECIMAL}, 
      #{totalIncomeAmount,jdbcType=DECIMAL}, #{userIncomeAmount,jdbcType=DECIMAL}, #{membersIncomeAmount,jdbcType=DECIMAL}, 
      #{totalDeficitAmount,jdbcType=DECIMAL}, #{userDeficitAmount,jdbcType=DECIMAL}, 
      #{membersDeficitAmount,jdbcType=DECIMAL}, #{totalStakeCount,jdbcType=INTEGER}, 
      #{userStakeCount,jdbcType=INTEGER}, #{membersStakeCount,jdbcType=INTEGER}, #{createTime,jdbcType=TIMESTAMP}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.racing.model.po.UserRacingIncome" useGeneratedKeys="true" keyProperty="id" >
    insert into user_racing_income
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="userId != null" >
        user_id,
      </if>
      <if test="racingNum != null" >
        racing_num,
      </if>
      <if test="totalStakeAmount != null" >
        total_stake_amount,
      </if>
      <if test="userStakeAmount != null" >
        user_stake_amount,
      </if>
      <if test="membersStakeAmount != null" >
        members_stake_amount,
      </if>
      <if test="totalIncomeAmount != null" >
        total_income_amount,
      </if>
      <if test="userIncomeAmount != null" >
        user_income_amount,
      </if>
      <if test="membersIncomeAmount != null" >
        members_income_amount,
      </if>
      <if test="totalDeficitAmount != null" >
        total_deficit_amount,
      </if>
      <if test="userDeficitAmount != null" >
        user_deficit_amount,
      </if>
      <if test="membersDeficitAmount != null" >
        members_deficit_amount,
      </if>
      <if test="totalStakeCount != null" >
        total_stake_count,
      </if>
      <if test="userStakeCount != null" >
        user_stake_count,
      </if>
      <if test="membersStakeCount != null" >
        members_stake_count,
      </if>
      <if test="createTime != null" >
        create_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="userId != null" >
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="racingNum != null" >
        #{racingNum,jdbcType=VARCHAR},
      </if>
      <if test="totalStakeAmount != null" >
        #{totalStakeAmount,jdbcType=DECIMAL},
      </if>
      <if test="userStakeAmount != null" >
        #{userStakeAmount,jdbcType=DECIMAL},
      </if>
      <if test="membersStakeAmount != null" >
        #{membersStakeAmount,jdbcType=DECIMAL},
      </if>
      <if test="totalIncomeAmount != null" >
        #{totalIncomeAmount,jdbcType=DECIMAL},
      </if>
      <if test="userIncomeAmount != null" >
        #{userIncomeAmount,jdbcType=DECIMAL},
      </if>
      <if test="membersIncomeAmount != null" >
        #{membersIncomeAmount,jdbcType=DECIMAL},
      </if>
      <if test="totalDeficitAmount != null" >
        #{totalDeficitAmount,jdbcType=DECIMAL},
      </if>
      <if test="userDeficitAmount != null" >
        #{userDeficitAmount,jdbcType=DECIMAL},
      </if>
      <if test="membersDeficitAmount != null" >
        #{membersDeficitAmount,jdbcType=DECIMAL},
      </if>
      <if test="totalStakeCount != null" >
        #{totalStakeCount,jdbcType=INTEGER},
      </if>
      <if test="userStakeCount != null" >
        #{userStakeCount,jdbcType=INTEGER},
      </if>
      <if test="membersStakeCount != null" >
        #{membersStakeCount,jdbcType=INTEGER},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.racing.model.po.UserRacingIncomeExample" resultType="java.lang.Integer" >
    select count(*) from user_racing_income
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update user_racing_income
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.userId != null" >
        user_id = #{record.userId,jdbcType=INTEGER},
      </if>
      <if test="record.racingNum != null" >
        racing_num = #{record.racingNum,jdbcType=VARCHAR},
      </if>
      <if test="record.totalStakeAmount != null" >
        total_stake_amount = #{record.totalStakeAmount,jdbcType=DECIMAL},
      </if>
      <if test="record.userStakeAmount != null" >
        user_stake_amount = #{record.userStakeAmount,jdbcType=DECIMAL},
      </if>
      <if test="record.membersStakeAmount != null" >
        members_stake_amount = #{record.membersStakeAmount,jdbcType=DECIMAL},
      </if>
      <if test="record.totalIncomeAmount != null" >
        total_income_amount = #{record.totalIncomeAmount,jdbcType=DECIMAL},
      </if>
      <if test="record.userIncomeAmount != null" >
        user_income_amount = #{record.userIncomeAmount,jdbcType=DECIMAL},
      </if>
      <if test="record.membersIncomeAmount != null" >
        members_income_amount = #{record.membersIncomeAmount,jdbcType=DECIMAL},
      </if>
      <if test="record.totalDeficitAmount != null" >
        total_deficit_amount = #{record.totalDeficitAmount,jdbcType=DECIMAL},
      </if>
      <if test="record.userDeficitAmount != null" >
        user_deficit_amount = #{record.userDeficitAmount,jdbcType=DECIMAL},
      </if>
      <if test="record.membersDeficitAmount != null" >
        members_deficit_amount = #{record.membersDeficitAmount,jdbcType=DECIMAL},
      </if>
      <if test="record.totalStakeCount != null" >
        total_stake_count = #{record.totalStakeCount,jdbcType=INTEGER},
      </if>
      <if test="record.userStakeCount != null" >
        user_stake_count = #{record.userStakeCount,jdbcType=INTEGER},
      </if>
      <if test="record.membersStakeCount != null" >
        members_stake_count = #{record.membersStakeCount,jdbcType=INTEGER},
      </if>
      <if test="record.createTime != null" >
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update user_racing_income
    set id = #{record.id,jdbcType=INTEGER},
      user_id = #{record.userId,jdbcType=INTEGER},
      racing_num = #{record.racingNum,jdbcType=VARCHAR},
      total_stake_amount = #{record.totalStakeAmount,jdbcType=DECIMAL},
      user_stake_amount = #{record.userStakeAmount,jdbcType=DECIMAL},
      members_stake_amount = #{record.membersStakeAmount,jdbcType=DECIMAL},
      total_income_amount = #{record.totalIncomeAmount,jdbcType=DECIMAL},
      user_income_amount = #{record.userIncomeAmount,jdbcType=DECIMAL},
      members_income_amount = #{record.membersIncomeAmount,jdbcType=DECIMAL},
      total_deficit_amount = #{record.totalDeficitAmount,jdbcType=DECIMAL},
      user_deficit_amount = #{record.userDeficitAmount,jdbcType=DECIMAL},
      members_deficit_amount = #{record.membersDeficitAmount,jdbcType=DECIMAL},
      total_stake_count = #{record.totalStakeCount,jdbcType=INTEGER},
      user_stake_count = #{record.userStakeCount,jdbcType=INTEGER},
      members_stake_count = #{record.membersStakeCount,jdbcType=INTEGER},
      create_time = #{record.createTime,jdbcType=TIMESTAMP}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.racing.model.po.UserRacingIncome" >
    update user_racing_income
    <set >
      <if test="userId != null" >
        user_id = #{userId,jdbcType=INTEGER},
      </if>
      <if test="racingNum != null" >
        racing_num = #{racingNum,jdbcType=VARCHAR},
      </if>
      <if test="totalStakeAmount != null" >
        total_stake_amount = #{totalStakeAmount,jdbcType=DECIMAL},
      </if>
      <if test="userStakeAmount != null" >
        user_stake_amount = #{userStakeAmount,jdbcType=DECIMAL},
      </if>
      <if test="membersStakeAmount != null" >
        members_stake_amount = #{membersStakeAmount,jdbcType=DECIMAL},
      </if>
      <if test="totalIncomeAmount != null" >
        total_income_amount = #{totalIncomeAmount,jdbcType=DECIMAL},
      </if>
      <if test="userIncomeAmount != null" >
        user_income_amount = #{userIncomeAmount,jdbcType=DECIMAL},
      </if>
      <if test="membersIncomeAmount != null" >
        members_income_amount = #{membersIncomeAmount,jdbcType=DECIMAL},
      </if>
      <if test="totalDeficitAmount != null" >
        total_deficit_amount = #{totalDeficitAmount,jdbcType=DECIMAL},
      </if>
      <if test="userDeficitAmount != null" >
        user_deficit_amount = #{userDeficitAmount,jdbcType=DECIMAL},
      </if>
      <if test="membersDeficitAmount != null" >
        members_deficit_amount = #{membersDeficitAmount,jdbcType=DECIMAL},
      </if>
      <if test="totalStakeCount != null" >
        total_stake_count = #{totalStakeCount,jdbcType=INTEGER},
      </if>
      <if test="userStakeCount != null" >
        user_stake_count = #{userStakeCount,jdbcType=INTEGER},
      </if>
      <if test="membersStakeCount != null" >
        members_stake_count = #{membersStakeCount,jdbcType=INTEGER},
      </if>
      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.racing.model.po.UserRacingIncome" >
    update user_racing_income
    set user_id = #{userId,jdbcType=INTEGER},
      racing_num = #{racingNum,jdbcType=VARCHAR},
      total_stake_amount = #{totalStakeAmount,jdbcType=DECIMAL},
      user_stake_amount = #{userStakeAmount,jdbcType=DECIMAL},
      members_stake_amount = #{membersStakeAmount,jdbcType=DECIMAL},
      total_income_amount = #{totalIncomeAmount,jdbcType=DECIMAL},
      user_income_amount = #{userIncomeAmount,jdbcType=DECIMAL},
      members_income_amount = #{membersIncomeAmount,jdbcType=DECIMAL},
      total_deficit_amount = #{totalDeficitAmount,jdbcType=DECIMAL},
      user_deficit_amount = #{userDeficitAmount,jdbcType=DECIMAL},
      members_deficit_amount = #{membersDeficitAmount,jdbcType=DECIMAL},
      total_stake_count = #{totalStakeCount,jdbcType=INTEGER},
      user_stake_count = #{userStakeCount,jdbcType=INTEGER},
      members_stake_count = #{membersStakeCount,jdbcType=INTEGER},
      create_time = #{createTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>